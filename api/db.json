{
  "streams": [
    {
      "title": "Leah Queen",
      "description": "Codes really well!",
      "userId": "106760535903808587029",
      "id": 1,
      "function (firstArg) {\n    for (var _len ": " arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key  ) {\n      rest[_key - 1] = arguments[_key];\n    } // create a class that reads current form name and creates a selector\n    // return\n\n\n    return function (Component) {\n      var FormValues = /*#__PURE__*/function (_React$Component) {\n        _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_2___default()(FormValues, _React$Component);\n\n        function FormValues(props) {\n          var _this;\n\n          _this = _React$Component.call(this, props) || this;\n\n          if (!props._reduxForm) {\n            throw new Error('formValues() must be used inside a React tree decorated with reduxForm()');\n          }\n\n          _this.updateComponent(props);\n\n          return _this;\n        }\n\n        var _proto = FormValues.prototype;\n\n        _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(props) {\n          if (typeof firstArg === 'function') {\n            this.updateComponent(props);\n          }\n        };\n\n        _proto.render = function render() {\n          var Component = this.Component;\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Component // so that the connected component updates props when sectionPrefix has changed\n          , _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({\n            sectionPrefix: this.props._reduxForm.sectionPrefix\n          }, this.props));\n        };\n\n        _proto.updateComponent = function updateComponent(props) {\n          var valuesMap;\n          var resolvedFirstArg = typeof firstArg === 'function' ? firstArg(props) : firstArg;\n\n          if (typeof resolvedFirstArg === 'string') {\n            var _rest$reduce;\n\n            valuesMap = rest.reduce(function (result, k) {\n              result[k] = k;\n              return result;\n            }, (_rest$reduce = {}, _rest$reduce[resolvedFirstArg] = resolvedFirstArg, _rest$reduce));\n          } else {\n            valuesMap = resolvedFirstArg;\n          }\n\n          if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_5___default()(valuesMap)) {\n            // maybe that empty valuesMap is ok if firstArg is a function?\n            // if this is the case, we probably should set this.Component = Component\n            throw new Error('formValues(): You must specify values to get as formValues(name1, name2, ...) or formValues({propName1: propPath1, ...}) or formValues((props) => name) or formValues((props) => ({propName1: propPath1, ...}))');\n          }\n\n          if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_4___default()(valuesMap, this._valuesMap)) {\n            // no change in valuesMap\n            return;\n          }\n\n          this._valuesMap = valuesMap;\n          this.setComponent();\n        };\n\n        _proto.setComponent = function setComponent() {\n          var _this2 = this;\n\n          var formValuesSelector = function formValuesSelector(_, _ref2) {\n            var sectionPrefix = _ref2.sectionPrefix; // Yes, we're only using connect() for listening to updates.\n            // The second argument needs to be there so that connect calls\n            // the selector when props change\n\n            var getValues = _this2.props._reduxForm.getValues;\n            var values = getValues();\n            return lodash_mapValues__WEBPACK_IMPORTED_MODULE_3___default()(_this2._valuesMap, function (path) {\n              return getIn(values, Object(_util_prefixName__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(_this2.props, path));\n            });\n          };\n\n          this.Component = Object(react_redux__WEBPACK_IMPORTED_MODULE_7__[\"connect\"])(formValuesSelector, function () {\n            return {};\n          } // ignore dispatch\n          )(function (_ref3) {\n            var sectionPrefix = _ref3.sectionPrefix,\n                otherProps = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default()(_ref3, [\"sectionPrefix\"]);\n\n            return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Component, otherProps);\n          });\n        };\n\n        return FormValues;\n      }(react__WEBPACK_IMPORTED_MODULE_6___default.a.Component);\n\n      return Object(_ReduxFormContext__WEBPACK_IMPORTED_MODULE_9__[\"withReduxForm\"])(FormValues);\n    };\n  }"
    },
    {
      "title": "Queen Codes",
      "description": "Is a great job. ",
      "userId": "106760535903808587029",
      "id": 2,
      "function (firstArg) {\n    for (var _len ": " arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key  ) {\n      rest[_key - 1] = arguments[_key];\n    } // create a class that reads current form name and creates a selector\n    // return\n\n\n    return function (Component) {\n      var FormValues = /*#__PURE__*/function (_React$Component) {\n        _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_2___default()(FormValues, _React$Component);\n\n        function FormValues(props) {\n          var _this;\n\n          _this = _React$Component.call(this, props) || this;\n\n          if (!props._reduxForm) {\n            throw new Error('formValues() must be used inside a React tree decorated with reduxForm()');\n          }\n\n          _this.updateComponent(props);\n\n          return _this;\n        }\n\n        var _proto = FormValues.prototype;\n\n        _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(props) {\n          if (typeof firstArg === 'function') {\n            this.updateComponent(props);\n          }\n        };\n\n        _proto.render = function render() {\n          var Component = this.Component;\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Component // so that the connected component updates props when sectionPrefix has changed\n          , _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({\n            sectionPrefix: this.props._reduxForm.sectionPrefix\n          }, this.props));\n        };\n\n        _proto.updateComponent = function updateComponent(props) {\n          var valuesMap;\n          var resolvedFirstArg = typeof firstArg === 'function' ? firstArg(props) : firstArg;\n\n          if (typeof resolvedFirstArg === 'string') {\n            var _rest$reduce;\n\n            valuesMap = rest.reduce(function (result, k) {\n              result[k] = k;\n              return result;\n            }, (_rest$reduce = {}, _rest$reduce[resolvedFirstArg] = resolvedFirstArg, _rest$reduce));\n          } else {\n            valuesMap = resolvedFirstArg;\n          }\n\n          if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_5___default()(valuesMap)) {\n            // maybe that empty valuesMap is ok if firstArg is a function?\n            // if this is the case, we probably should set this.Component = Component\n            throw new Error('formValues(): You must specify values to get as formValues(name1, name2, ...) or formValues({propName1: propPath1, ...}) or formValues((props) => name) or formValues((props) => ({propName1: propPath1, ...}))');\n          }\n\n          if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_4___default()(valuesMap, this._valuesMap)) {\n            // no change in valuesMap\n            return;\n          }\n\n          this._valuesMap = valuesMap;\n          this.setComponent();\n        };\n\n        _proto.setComponent = function setComponent() {\n          var _this2 = this;\n\n          var formValuesSelector = function formValuesSelector(_, _ref2) {\n            var sectionPrefix = _ref2.sectionPrefix; // Yes, we're only using connect() for listening to updates.\n            // The second argument needs to be there so that connect calls\n            // the selector when props change\n\n            var getValues = _this2.props._reduxForm.getValues;\n            var values = getValues();\n            return lodash_mapValues__WEBPACK_IMPORTED_MODULE_3___default()(_this2._valuesMap, function (path) {\n              return getIn(values, Object(_util_prefixName__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(_this2.props, path));\n            });\n          };\n\n          this.Component = Object(react_redux__WEBPACK_IMPORTED_MODULE_7__[\"connect\"])(formValuesSelector, function () {\n            return {};\n          } // ignore dispatch\n          )(function (_ref3) {\n            var sectionPrefix = _ref3.sectionPrefix,\n                otherProps = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default()(_ref3, [\"sectionPrefix\"]);\n\n            return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Component, otherProps);\n          });\n        };\n\n        return FormValues;\n      }(react__WEBPACK_IMPORTED_MODULE_6___default.a.Component);\n\n      return Object(_ReduxFormContext__WEBPACK_IMPORTED_MODULE_9__[\"withReduxForm\"])(FormValues);\n    };\n  }"
    },
    {
      "title": "Leah",
      "description": "Queen",
      "userId": "106760535903808587029",
      "id": 3,
      "function (firstArg) {\n    for (var _len ": " arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key  ) {\n      rest[_key - 1] = arguments[_key];\n    } // create a class that reads current form name and creates a selector\n    // return\n\n\n    return function (Component) {\n      var FormValues = /*#__PURE__*/function (_React$Component) {\n        _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_2___default()(FormValues, _React$Component);\n\n        function FormValues(props) {\n          var _this;\n\n          _this = _React$Component.call(this, props) || this;\n\n          if (!props._reduxForm) {\n            throw new Error('formValues() must be used inside a React tree decorated with reduxForm()');\n          }\n\n          _this.updateComponent(props);\n\n          return _this;\n        }\n\n        var _proto = FormValues.prototype;\n\n        _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(props) {\n          if (typeof firstArg === 'function') {\n            this.updateComponent(props);\n          }\n        };\n\n        _proto.render = function render() {\n          var Component = this.Component;\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Component // so that the connected component updates props when sectionPrefix has changed\n          , _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({\n            sectionPrefix: this.props._reduxForm.sectionPrefix\n          }, this.props));\n        };\n\n        _proto.updateComponent = function updateComponent(props) {\n          var valuesMap;\n          var resolvedFirstArg = typeof firstArg === 'function' ? firstArg(props) : firstArg;\n\n          if (typeof resolvedFirstArg === 'string') {\n            var _rest$reduce;\n\n            valuesMap = rest.reduce(function (result, k) {\n              result[k] = k;\n              return result;\n            }, (_rest$reduce = {}, _rest$reduce[resolvedFirstArg] = resolvedFirstArg, _rest$reduce));\n          } else {\n            valuesMap = resolvedFirstArg;\n          }\n\n          if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_5___default()(valuesMap)) {\n            // maybe that empty valuesMap is ok if firstArg is a function?\n            // if this is the case, we probably should set this.Component = Component\n            throw new Error('formValues(): You must specify values to get as formValues(name1, name2, ...) or formValues({propName1: propPath1, ...}) or formValues((props) => name) or formValues((props) => ({propName1: propPath1, ...}))');\n          }\n\n          if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_4___default()(valuesMap, this._valuesMap)) {\n            // no change in valuesMap\n            return;\n          }\n\n          this._valuesMap = valuesMap;\n          this.setComponent();\n        };\n\n        _proto.setComponent = function setComponent() {\n          var _this2 = this;\n\n          var formValuesSelector = function formValuesSelector(_, _ref2) {\n            var sectionPrefix = _ref2.sectionPrefix; // Yes, we're only using connect() for listening to updates.\n            // The second argument needs to be there so that connect calls\n            // the selector when props change\n\n            var getValues = _this2.props._reduxForm.getValues;\n            var values = getValues();\n            return lodash_mapValues__WEBPACK_IMPORTED_MODULE_3___default()(_this2._valuesMap, function (path) {\n              return getIn(values, Object(_util_prefixName__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(_this2.props, path));\n            });\n          };\n\n          this.Component = Object(react_redux__WEBPACK_IMPORTED_MODULE_7__[\"connect\"])(formValuesSelector, function () {\n            return {};\n          } // ignore dispatch\n          )(function (_ref3) {\n            var sectionPrefix = _ref3.sectionPrefix,\n                otherProps = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default()(_ref3, [\"sectionPrefix\"]);\n\n            return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Component, otherProps);\n          });\n        };\n\n        return FormValues;\n      }(react__WEBPACK_IMPORTED_MODULE_6___default.a.Component);\n\n      return Object(_ReduxFormContext__WEBPACK_IMPORTED_MODULE_9__[\"withReduxForm\"])(FormValues);\n    };\n  }"
    }
  ]
}